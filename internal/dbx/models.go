// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package dbx

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/paulmach/orb"
)

type CityGovRoles string

const (
	CityGovRolesAdmin     CityGovRoles = "admin"
	CityGovRolesModerator CityGovRoles = "moderator"
)

func (e *CityGovRoles) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CityGovRoles(s)
	case string:
		*e = CityGovRoles(s)
	default:
		return fmt.Errorf("unsupported scan type for CityGovRoles: %T", src)
	}
	return nil
}

type NullCityGovRoles struct {
	CityGovRoles CityGovRoles `json:"city_gov_roles"`
	Valid        bool         `json:"valid"` // Valid is true if CityGovRoles is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCityGovRoles) Scan(value interface{}) error {
	if value == nil {
		ns.CityGovRoles, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CityGovRoles.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCityGovRoles) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CityGovRoles), nil
}

type CityLanguages string

const (
	CityLanguagesEn CityLanguages = "en"
	CityLanguagesEs CityLanguages = "es"
	CityLanguagesFr CityLanguages = "fr"
	CityLanguagesDe CityLanguages = "de"
	CityLanguagesIt CityLanguages = "it"
	CityLanguagesPt CityLanguages = "pt"
	CityLanguagesUk CityLanguages = "uk"
)

func (e *CityLanguages) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CityLanguages(s)
	case string:
		*e = CityLanguages(s)
	default:
		return fmt.Errorf("unsupported scan type for CityLanguages: %T", src)
	}
	return nil
}

type NullCityLanguages struct {
	CityLanguages CityLanguages `json:"city_languages"`
	Valid         bool          `json:"valid"` // Valid is true if CityLanguages is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCityLanguages) Scan(value interface{}) error {
	if value == nil {
		ns.CityLanguages, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CityLanguages.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCityLanguages) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CityLanguages), nil
}

type CityStatuses string

const (
	CityStatusesSupported   CityStatuses = "supported"
	CityStatusesUnsupported CityStatuses = "unsupported"
)

func (e *CityStatuses) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CityStatuses(s)
	case string:
		*e = CityStatuses(s)
	default:
		return fmt.Errorf("unsupported scan type for CityStatuses: %T", src)
	}
	return nil
}

type NullCityStatuses struct {
	CityStatuses CityStatuses `json:"city_statuses"`
	Valid        bool         `json:"valid"` // Valid is true if CityStatuses is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCityStatuses) Scan(value interface{}) error {
	if value == nil {
		ns.CityStatuses, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CityStatuses.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCityStatuses) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CityStatuses), nil
}

type CountryStatuses string

const (
	CountryStatusesSupported   CountryStatuses = "supported"
	CountryStatusesUnsupported CountryStatuses = "unsupported"
)

func (e *CountryStatuses) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CountryStatuses(s)
	case string:
		*e = CountryStatuses(s)
	default:
		return fmt.Errorf("unsupported scan type for CountryStatuses: %T", src)
	}
	return nil
}

type NullCountryStatuses struct {
	CountryStatuses CountryStatuses `json:"country_statuses"`
	Valid           bool            `json:"valid"` // Valid is true if CountryStatuses is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCountryStatuses) Scan(value interface{}) error {
	if value == nil {
		ns.CountryStatuses, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CountryStatuses.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCountryStatuses) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CountryStatuses), nil
}

type City struct {
	ID        uuid.UUID        `json:"id"`
	CountryID uuid.UUID        `json:"country_id"`
	Status    CityStatuses     `json:"status"`
	Zone      orb.MultiPolygon `json:"zone"`
	Icon      string           `json:"icon"`
	Slug      string           `json:"slug"`
	Timezone  string           `json:"timezone"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

type CityDetail struct {
	CityID   uuid.UUID     `json:"city_id"`
	Language CityLanguages `json:"language"`
	Name     string        `json:"name"`
}

type CityGovernment struct {
	UserID    uuid.UUID        `json:"user_id"`
	CityID    uuid.UUID        `json:"city_id"`
	Role      CityGovRoles     `json:"role"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

type Country struct {
	ID        uuid.UUID        `json:"id"`
	Name      string           `json:"name"`
	Status    CountryStatuses  `json:"status"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}
