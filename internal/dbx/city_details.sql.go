// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: city_details.sql

package dbx

import (
	"context"

	"github.com/google/uuid"
)

const createCityDetails = `-- name: CreateCityDetails :exec
INSERT INTO city_details (city_id, language, name)
VALUES ($1, $2, $3)
`

type CreateCityDetailsParams struct {
	CityID   uuid.UUID     `json:"city_id"`
	Language CityLanguages `json:"language"`
	Name     string        `json:"name"`
}

// $1 = city_id (uuid), $2 = language (city_languages), $3 = name (varchar)
func (q *Queries) CreateCityDetails(ctx context.Context, arg CreateCityDetailsParams) error {
	_, err := q.db.Exec(ctx, createCityDetails, arg.CityID, arg.Language, arg.Name)
	return err
}

const deleteCityDetails = `-- name: DeleteCityDetails :exec
DELETE FROM city_details
WHERE city_id = $1
  AND language = $2
`

type DeleteCityDetailsParams struct {
	CityID   uuid.UUID     `json:"city_id"`
	Language CityLanguages `json:"language"`
}

// $1 = city_id (uuid), $2 = language (city_languages)
func (q *Queries) DeleteCityDetails(ctx context.Context, arg DeleteCityDetailsParams) error {
	_, err := q.db.Exec(ctx, deleteCityDetails, arg.CityID, arg.Language)
	return err
}

const getCityDetailsByCityIdAndAnyLanguage = `-- name: GetCityDetailsByCityIdAndAnyLanguage :one
SELECT city_id, language, name
FROM city_details
WHERE city_id = $1
LIMIT 1
`

// $1 = city_id (uuid)
func (q *Queries) GetCityDetailsByCityIdAndAnyLanguage(ctx context.Context, cityID uuid.UUID) (CityDetail, error) {
	row := q.db.QueryRow(ctx, getCityDetailsByCityIdAndAnyLanguage, cityID)
	var i CityDetail
	err := row.Scan(&i.CityID, &i.Language, &i.Name)
	return i, err
}

const getCityDetailsByCityIdAndLanguage = `-- name: GetCityDetailsByCityIdAndLanguage :one
SELECT city_id, language, name
FROM city_details
WHERE city_id = $1
  AND language = $2
`

type GetCityDetailsByCityIdAndLanguageParams struct {
	CityID   uuid.UUID     `json:"city_id"`
	Language CityLanguages `json:"language"`
}

// $1 = city_id (uuid), $2 = language (city_languages)
func (q *Queries) GetCityDetailsByCityIdAndLanguage(ctx context.Context, arg GetCityDetailsByCityIdAndLanguageParams) (CityDetail, error) {
	row := q.db.QueryRow(ctx, getCityDetailsByCityIdAndLanguage, arg.CityID, arg.Language)
	var i CityDetail
	err := row.Scan(&i.CityID, &i.Language, &i.Name)
	return i, err
}

const selectCityDetailsByCityId = `-- name: SelectCityDetailsByCityId :many
WITH base AS (
    SELECT
        cd.city_id,
        cd.language,
        cd.name,
        COUNT(*) OVER() AS total_count
    FROM city_details cd
    WHERE cd.city_id = $1
)
SELECT city_id, language, name, total_count
FROM base
ORDER BY language
    LIMIT $3
OFFSET (GREATEST($2, 1) - 1) * $3
`

type SelectCityDetailsByCityIdParams struct {
	CityID  uuid.UUID   `json:"city_id"`
	Column2 interface{} `json:"column_2"`
	Limit   int32       `json:"limit"`
}

type SelectCityDetailsByCityIdRow struct {
	CityID     uuid.UUID     `json:"city_id"`
	Language   CityLanguages `json:"language"`
	Name       string        `json:"name"`
	TotalCount int64         `json:"total_count"`
}

// $1 = city_id (uuid), $2 = page, $3 = size
func (q *Queries) SelectCityDetailsByCityId(ctx context.Context, arg SelectCityDetailsByCityIdParams) ([]SelectCityDetailsByCityIdRow, error) {
	rows, err := q.db.Query(ctx, selectCityDetailsByCityId, arg.CityID, arg.Column2, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectCityDetailsByCityIdRow
	for rows.Next() {
		var i SelectCityDetailsByCityIdRow
		if err := rows.Scan(
			&i.CityID,
			&i.Language,
			&i.Name,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCityDetails = `-- name: UpdateCityDetails :exec
UPDATE city_details
SET name = $3
WHERE city_id = $1
  AND language = $2
`

type UpdateCityDetailsParams struct {
	CityID   uuid.UUID     `json:"city_id"`
	Language CityLanguages `json:"language"`
	Name     string        `json:"name"`
}

// $1 = city_id (uuid), $2 = language (city_languages), $3 = new name (varchar)
func (q *Queries) UpdateCityDetails(ctx context.Context, arg UpdateCityDetailsParams) error {
	_, err := q.db.Exec(ctx, updateCityDetails, arg.CityID, arg.Language, arg.Name)
	return err
}
